K-diff Pairs in an Array

Solution
Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.

A k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:

0 <= i, j < nums.length
i != j
a <= b
b - a == k
 

Example 1:

Input: nums = [3,1,4,1,5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.
Example 2:

Input: nums = [1,2,3,4,5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).
Example 3:

Input: nums = [1,3,1,5,4], k = 0
Output: 1
Explanation: There is one 0-diff pair in the array, (1, 1).
Example 4:

Input: nums = [1,2,4,4,3,3,0,9,2,3], k = 3
Output: 2
Example 5:

Input: nums = [-1,-2,-3], k = 1
Output: 2
 

Constraints:

1 <= nums.length <= 104
-107 <= nums[i] <= 107
0 <= k <= 107

--------

// class Solution {
//     public int findPairs(int[] nums, int k) {
//         HashSet<Integer> hm=new HashSet<>();
//         int count=0;
//          for(int i=0;i<nums.length;i++)
//         {
//             if(hm.add(nums[i]));
//         }
        
//         for(int i=0;i<nums.length;i++)
//         {   Arrays.sort(nums);
//             if(i<nums.length-2 &&nums[i]==nums[i+1])continue;
//          else{
//             if(hm.contains(nums[i]+k))count++;
//          }
//         }
//         return count;       
//     }
// }

// class Solution {
//     public int findPairs(int[] nums, int k) {
//         if (k < 0) {
//             return 0;
//         }
//         Map<Integer, Integer> map = new HashMap<>();
//         int result = 0;
//         for (int i : nums) {
//             if (map.containsKey(i)) {
//                 if (k == 0 && map.get(i) == 1) {
//                     result++;
//                 }
//                 map.put(i, map.get(i) + 1);
//             } else {
//                 if (map.containsKey(i - k)) {
//                     result++;
//                 }
//                 if (map.containsKey(i + k)) {
//                     result++;
//                 }
//                 map.put(i, 1);
//             }
//         }
//         return result;
//     }
// }

class Solution {
    public int findPairs(int[] nums, int k) {
        if (k < 0) return 0;
        Set<Integer> numbers = new HashSet<>();
        Set<Integer> found = new HashSet<>();
        for (int n : nums) {
            if (numbers.contains(n + k)) found.add(n);
            if (numbers.contains(n - k)) found.add(n - k);
            numbers.add(n);
        }
        return found.size();
    }
}
